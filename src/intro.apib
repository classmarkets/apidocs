# classmarkets HTTP API

This is the documentation for the public classmarkets API.

## About this documentation

The classmarkets API documentation is authored in [API Blueprint][blueprint].
The source is [publicly available on GitHub][github].  The canonical version is
the HTML rendering at [http://apidocs.classmarkets.com/][canonical].

It is also [published to Apiary][apiary]. Apiary offers example requests in
several programming languages, a mock server that can be used to build client
prototypes, as well as a console that demonstrates the API in the browser.

## Alternative formats

This documentation exists in multiple formats. [A full listing is available
here][tree].

The all in one blueprint is [hosted by Apiary][apiary.apib]. For consumption by
machines we provide the [AST in JSON][ast].

If you want to build a client for only some of the endpoints, the partial
blueprints may be useful &ndash; see the [directory listing][tree].

<!--
as well as automatically built [RAML][raml] and [Swagger][swagger] definitions.
Please note that classmarkets is not using the RAML and Swagger definitions and
can not guarantee their completeness nor correctness. Specifically, both
formats support only one example transaction per endpoint.
-->

[blueprint]: https://apiblueprint.org/
[github]: https://github.com/classmarkets/apidocs
[canonical]: http://apidocs.classmarkets.com/
[apiary]: http://docs.classmarkets.apiary.io/
[ast]: http://apidocs.classmarkets.com/apib.json
[raml]:  http://apidocs.classmarkets.com/api.raml
[swagger]: http://apidocs.classmarkets.com/swagger.yaml
[tree]: http://apidocs.classmarkets.com/tree.html
[apiary.apib]: https://jsapi.apiary.io/apis/classmarkets.apib

## General concepts

Unless otherwise noted in the documentation for a specific endpoint, the
following concepts apply.

The API transport is JSON over HTTPS. Responses will indicate a Content-Type of
"application/json". Requests with a JSON body preferrably have a Content-Type
of "application/json" in the header as well, or no Content-Type at all. It is
an error to send e. g. "text/plain" in the header of a JSON request body. We
strongly recommend to indicate the Content-Type explicitly to guarantee forward
compatibility.

Requests are authenticated using OAuth2 access tokens. This is described in
detail below.

Dates and times are represented in a format specified by [RFC 3339][rfc3339],
such as `2016-04-24T11:29:07.612797822Z`. The precision for fractional seconds
may vary but will not exceed nanoseconds. Times are given in UTC. Named
timezones, such as "GMT", "CET" are not supported, because [they are
ambiguous][timezones].

[rfc3339]: http://tools.ietf.org/html/rfc3339
[timezones]: https://en.wikipedia.org/wiki/List_of_time_zone_abbreviations

## A word on data sanity

classmarkets ingests data from generally untrustworthy sources. The API does
not attempt to sanitize this data, because what sanitization means depends on
the context this data is used in. This means that per se you cannot trust any
data you receive from the API, especially from the listings endpoints.

This is not a hypothetical situation. There *are* "email addresses" like `';
DROP TABLE users; --`. There *are* listing descriptions containing malformed
HTML and potentially malicious JavaScript. It is the client's responsibility to
sanitize and/or escape properly.

## Backwards compatibility

With the following exceptions, every change to the API is considered to break
backwards compatibility and will result in a new version for affected
endpoints.

Changes we do not consider to break compatibility and may be introduced without
prior notice are:

* Adding a new attribute to a resource, be it at the top level or to any nested
  attribute.
* Adding a new value to an enumeration, be it an attribute or a request
  parameter.
* Removing an optional attribute or request parameter if and only if the API
  can assume a sensible default behaviour when receiving this attribute or
  parameter in the future.
* Removing a value from an enumeration, be it an attribute or a request
  parameter, if and only if the API can assume a sensible default behaviour
  when receiving this value in the future.
* Adding a new, optional request parameter.
* Adding a new endpoint.

<!-- TODO: mailing list for communicating changes? What about BC breaks that are required due to security issues? -->
